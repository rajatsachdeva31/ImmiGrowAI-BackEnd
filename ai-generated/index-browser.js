
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firebaseUid: 'firebaseUid',
  fullName: 'fullName',
  roleId: 'roleId',
  createdAt: 'createdAt'
};

exports.Prisma.UserCareerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  professionalSummary: 'professionalSummary',
  skills: 'skills',
  targetIndustries: 'targetIndustries',
  careerObjectives: 'careerObjectives',
  marketAlignmentScore: 'marketAlignmentScore',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt'
};

exports.Prisma.ResumeAnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  originalFileName: 'originalFileName',
  fileData: 'fileData',
  extractedText: 'extractedText',
  structuredData: 'structuredData',
  personalInfo: 'personalInfo',
  professionalSummary: 'professionalSummary',
  skills: 'skills',
  workExperience: 'workExperience',
  education: 'education',
  certifications: 'certifications',
  projects: 'projects',
  canadianMarketAnalysis: 'canadianMarketAnalysis',
  confidenceScores: 'confidenceScores',
  metadata: 'metadata',
  processingMethod: 'processingMethod',
  userCorrections: 'userCorrections',
  processingStatus: 'processingStatus',
  createdAt: 'createdAt'
};

exports.Prisma.MentorProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  industry: 'industry',
  expertise: 'expertise',
  yearsOfExperience: 'yearsOfExperience',
  availableHours: 'availableHours',
  bio: 'bio',
  linkedInProfile: 'linkedInProfile',
  languages: 'languages',
  culturalBackground: 'culturalBackground',
  createdAt: 'createdAt'
};

exports.Prisma.MentorshipMatchScalarFieldEnum = {
  id: 'id',
  menteeId: 'menteeId',
  mentorId: 'mentorId',
  compatibilityScore: 'compatibilityScore',
  status: 'status',
  matchReason: 'matchReason',
  createdAt: 'createdAt'
};

exports.Prisma.CoachingSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionType: 'sessionType',
  conversationLog: 'conversationLog',
  actionItems: 'actionItems',
  goals: 'goals',
  progress: 'progress',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobOpportunityScalarFieldEnum = {
  id: 'id',
  title: 'title',
  company: 'company',
  location: 'location',
  description: 'description',
  requirements: 'requirements',
  salary: 'salary',
  jobType: 'jobType',
  industry: 'industry',
  sourceUrl: 'sourceUrl',
  postedDate: 'postedDate',
  createdAt: 'createdAt'
};

exports.Prisma.JobMatchScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobOpportunityId: 'jobOpportunityId',
  relevanceScore: 'relevanceScore',
  matchReason: 'matchReason',
  applicationStatus: 'applicationStatus',
  savedAt: 'savedAt',
  appliedAt: 'appliedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SkillGapAnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetRole: 'targetRole',
  currentSkills: 'currentSkills',
  requiredSkills: 'requiredSkills',
  skillGaps: 'skillGaps',
  improvementRoadmap: 'improvementRoadmap',
  progressTracking: 'progressTracking',
  industryBenchmark: 'industryBenchmark',
  lastAssessmentDate: 'lastAssessmentDate',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  UserCareerProfile: 'UserCareerProfile',
  ResumeAnalysis: 'ResumeAnalysis',
  MentorProfile: 'MentorProfile',
  MentorshipMatch: 'MentorshipMatch',
  CoachingSession: 'CoachingSession',
  JobOpportunity: 'JobOpportunity',
  JobMatch: 'JobMatch',
  SkillGapAnalysis: 'SkillGapAnalysis'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
